import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import useApi from '../../hooks/useApi';
import {
  MessageCircle,
  Send,
  Mic,
  MicOff,
  Brain,
  Zap,
  Lightbulb,
  Clock,
  Target,
  Calendar,
  BookOpen,
  Users,
  GraduationCap,
  User,
  Plus,
  X,
  Check,
  AlertCircle,
  Info,
  Sparkles,
  Rocket,
  Star,
  Award,
  Trophy,
  Flame,
  Coffee,
  Music,
  Timer,
  Settings,
  Eye,
  EyeOff,
  ChevronDown,
  ChevronUp,
  RotateCcw,
  Save,
  Share2,
  Download,
  Upload,
  Lock,
  Unlock
} from 'lucide-react';

const ChatbotTodoCreator = ({ onTodoCreated, onClose }) => {
  const { post } = useApi();
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isRecording, setIsRecording] = useState(false);
  const [showSuggestions, setShowSuggestions] = useState(true);
  const [selectedTodoType, setSelectedTodoType] = useState('personal');
  const [generatedTodo, setGeneratedTodo] = useState(null);
  const [showGeneratedTodo, setShowGeneratedTodo] = useState(false);

  const recognitionRef = useRef(null);
  const messagesEndRef = useRef(null);

  // Quick suggestions for users
  const quickSuggestions = [
    {
      text: "T·∫°o todo chu·∫©n b·ªã thi m√¥n To√°n",
      icon: "üìö",
      type: "personal"
    },
    {
      text: "T·∫°o d·ª± √°n nh√≥m cho m√¥n L·∫≠p tr√¨nh",
      icon: "üíª",
      type: "group"
    },
    {
      text: "T·∫°o b√†i t·∫≠p v·ªÅ nh√† cho l·ªõp 10A",
      icon: "üéì",
      type: "teacher_assignment"
    },
    {
      text: "T·∫°o l·ªãch h·ªçc h√†ng ng√†y",
      icon: "üìÖ",
      type: "personal"
    },
    {
      text: "T·∫°o todo nghi√™n c·ª©u cho lu·∫≠n vƒÉn",
      icon: "üî¨",
      type: "personal"
    },
    {
      text: "T·∫°o k·∫ø ho·∫°ch √¥n thi cu·ªëi k·ª≥",
      icon: "üéØ",
      type: "personal"
    }
  ];

  // Initialize speech recognition
  useEffect(() => {
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      recognitionRef.current = new SpeechRecognition();
      recognitionRef.current.continuous = true;
      recognitionRef.current.interimResults = true;
      recognitionRef.current.lang = 'vi-VN';

      recognitionRef.current.onresult = (event) => {
        let finalTranscript = '';
        for (let i = event.resultIndex; i < event.results.length; i++) {
          if (event.results[i].isFinal) {
            finalTranscript += event.results[i][0].transcript;
          }
        }
        if (finalTranscript) {
          setInputMessage(prev => prev + finalTranscript);
        }
      };

      recognitionRef.current.onerror = (event) => {
        console.error('Speech recognition error:', event.error);
        setIsRecording(false);
      };
    }

    // Add welcome message
    setMessages([
      {
        id: 1,
        type: 'bot',
        content: 'Xin ch√†o! T√¥i l√† AI Assistant. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t·∫°o todo m·ªôt c√°ch th√¥ng minh. H√£y m√¥ t·∫£ c√¥ng vi·ªác b·∫°n mu·ªën l√†m v√† t√¥i s·∫Ω t·∫°o todo ph√π h·ª£p cho b·∫°n!',
        timestamp: new Date(),
        agent: 'welcome',
        quickActions: [
          { label: 'üìã T·∫°o todo m·ªõi', action: 't·∫°o todo m·ªõi cho t√¥i' },
          { label: 'üìö H·ªçc t·∫≠p', action: 't·∫°o todo cho vi·ªác h·ªçc t·∫≠p' },
          { label: 'üíº C√¥ng vi·ªác', action: 't·∫°o todo cho c√¥ng vi·ªác' },
          { label: 'üè† C√° nh√¢n', action: 't·∫°o todo cho vi·ªác c√° nh√¢n' }
        ]
      }
    ]);
  }, []);

  // Auto scroll to bottom
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const startVoiceRecording = () => {
    if (recognitionRef.current) {
      recognitionRef.current.start();
      setIsRecording(true);
    }
  };

  const stopVoiceRecording = () => {
    if (recognitionRef.current) {
      recognitionRef.current.stop();
      setIsRecording(false);
    }
  };

  const handleSendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return;

    const userMessage = {
      id: Date.now(),
      type: 'user',
      content: inputMessage,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsLoading(true);

    try {
      // Send message to chatbot API
      const response = await post('/ai/chatbot', {
        prompt: inputMessage,
        context: 'todo_creation',
        todoType: selectedTodoType
      });

      const botMessage = {
        id: Date.now() + 1,
        type: 'bot',
        content: response.data.message || 'T√¥i ƒë√£ hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n. H√£y ƒë·ªÉ t√¥i t·∫°o todo ph√π h·ª£p.',
        timestamp: new Date(),
        suggestedTodo: response.data.suggestedTodo
      };

      setMessages(prev => [...prev, botMessage]);

      // If chatbot suggests a todo, show it
      if (response.data.suggestedTodo) {
        setGeneratedTodo(response.data.suggestedTodo);
        setShowGeneratedTodo(true);
      }
    } catch (error) {
      console.error('Error sending message:', error);
      
      const errorMessage = {
        id: Date.now() + 1,
        type: 'bot',
        content: 'Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.',
        timestamp: new Date(),
        isError: true
      };

      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleQuickSuggestion = (suggestion) => {
    setInputMessage(suggestion.text);
    setSelectedTodoType(suggestion.type);
    setShowSuggestions(false);
  };

  const handleQuickAction = (action) => {
    console.log('üîç Quick action clicked:', action);
    // Set the input message to the action text
    setInputMessage(action);
    // Focus on the input field
    const textarea = document.querySelector('textarea');
    if (textarea) {
      textarea.focus();
    }
  };

  // Format text with markdown support and clickable links
  const formatText = (text) => {
    if (!text) return '';
    
    // Bold: **text** -> <strong>text</strong>
    text = text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
    
    // Italic: *text* -> <em>text</em>
    text = text.replace(/\*(.*?)\*/g, '<em>$1</em>');
    
    // Inline code: `code` -> <code>code</code>
    text = text.replace(/`([^`]+)`/g, '<code class="bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded text-sm font-mono text-red-600 dark:text-red-400">$1</code>');
    
    // Links: [text](url) -> <a href="url">text</a>
    text = text.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:text-blue-800 underline">$1</a>');
    
    // Raw URLs: Convert plain URLs to clickable links
    text = text.replace(/(https?:\/\/[^\s<>"{}|\\^`\[\]]+)/g, '<a href="$1" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:text-blue-800 underline">$1</a>');
    
    // Line breaks
    text = text.replace(/\n/g, '<br />');
    
    return text;
  };

  const handleCreateTodoFromChatbot = async () => {
    if (!generatedTodo) return;

    try {
      setIsLoading(true);
      
      // Create todo using chatbot endpoint
      const response = await post('/todo/chatbot', {
        prompt: inputMessage,
        todoType: selectedTodoType,
        ...generatedTodo
      });

      if (onTodoCreated) {
        onTodoCreated(response.data.todo);
      }

      // Add success message
      const successMessage = {
        id: Date.now(),
        type: 'bot',
        content: '‚úÖ Todo ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng! B·∫°n c√≥ th·ªÉ xem trong danh s√°ch todo c·ªßa m√¨nh.',
        timestamp: new Date(),
        isSuccess: true
      };

      setMessages(prev => [...prev, successMessage]);
      setShowGeneratedTodo(false);
      setGeneratedTodo(null);
    } catch (error) {
      console.error('Error creating todo:', error);
      
      const errorMessage = {
        id: Date.now(),
        type: 'bot',
        content: '‚ùå C√≥ l·ªói x·∫£y ra khi t·∫°o todo. Vui l√≤ng th·ª≠ l·∫°i.',
        timestamp: new Date(),
        isError: true
      };

      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const formatTime = (date) => {
    return new Date(date).toLocaleTimeString('vi-VN', {
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <motion.div
        initial={{ opacity: 0, scale: 0.9 }}
        animate={{ opacity: 1, scale: 1 }}
        exit={{ opacity: 0, scale: 0.9 }}
        className="bg-white dark:bg-gray-800 rounded-xl shadow-2xl w-full max-w-4xl h-[80vh] flex flex-col"
      >
        {/* Header */}
        <div className="bg-gradient-to-r from-blue-600 to-purple-600 text-white p-4 rounded-t-xl">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <Brain className="w-6 h-6" />
              <div>
                <h2 className="text-xl font-bold">AI Todo Creator</h2>
                <p className="text-sm opacity-90">T·∫°o todo th√¥ng minh v·ªõi AI Assistant</p>
              </div>
            </div>
            <button
              onClick={onClose}
              className="p-2 hover:bg-white/20 rounded-lg transition-colors"
            >
              <X className="w-5 h-5" />
            </button>
          </div>
        </div>

        {/* Chat Messages */}
        <div className="flex-1 overflow-y-auto p-4 space-y-4">
          {messages.map((message) => (
            <motion.div
              key={message.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              <div
                className={`max-w-[80%] p-3 rounded-lg ${
                  message.type === 'user'
                    ? 'bg-blue-500 text-white'
                    : message.isError
                    ? 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-300'
                    : message.isSuccess
                    ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300'
                    : 'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200'
                }`}
              >
                <div className="flex items-start space-x-2">
                  {message.type === 'bot' && (
                    <Brain className="w-4 h-4 mt-1 flex-shrink-0" />
                  )}
                  <div className="flex-1">
                    <p className="text-sm" dangerouslySetInnerHTML={{ __html: formatText(message.content) }} />
                    
                    {/* Quick Action Buttons for Welcome Message */}
                    {message.type === 'bot' && message.agent === 'welcome' && message.quickActions && (
                      <div className="mt-3 space-y-2">
                        <div className="text-xs text-gray-500 dark:text-gray-400 mb-2">
                          Ch·ªçn lo·∫°i todo b·∫°n mu·ªën t·∫°o:
                        </div>
                        <div className="grid grid-cols-2 gap-2">
                          {message.quickActions.map((action, actionIndex) => (
                            <button
                              key={actionIndex}
                              onClick={() => handleQuickAction(action.action)}
                              className="px-2 py-1 text-xs bg-blue-50 hover:bg-blue-100 dark:bg-blue-900/20 dark:hover:bg-blue-900/40 text-blue-700 dark:text-blue-300 rounded border border-blue-200 dark:border-blue-700 transition-all duration-200 hover:scale-105 active:scale-95"
                            >
                              {action.label}
                            </button>
                          ))}
                        </div>
                      </div>
                    )}
                    
                    <p className="text-xs opacity-70 mt-1">
                      {formatTime(message.timestamp)}
                    </p>
                  </div>
                </div>
              </div>
            </motion.div>
          ))}

          {isLoading && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              className="flex justify-start"
            >
              <div className="bg-gray-100 dark:bg-gray-700 p-3 rounded-lg">
                <div className="flex items-center space-x-2">
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-500"></div>
                  <span className="text-sm text-gray-600 dark:text-gray-300">
                    AI ƒëang suy nghƒ©...
                  </span>
                </div>
              </div>
            </motion.div>
          )}

          <div ref={messagesEndRef} />
        </div>

        {/* Quick Suggestions */}
        <AnimatePresence>
          {showSuggestions && messages.length === 1 && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              className="px-4 pb-4"
            >
              <div className="bg-gradient-to-r from-yellow-50 to-orange-50 dark:from-yellow-900/20 dark:to-orange-900/20 p-4 rounded-lg">
                <h3 className="text-sm font-medium text-gray-800 dark:text-gray-200 mb-3 flex items-center">
                  <Lightbulb className="w-4 h-4 mr-2 text-yellow-500" />
                  G·ª£i √Ω nhanh
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                  {quickSuggestions.map((suggestion, index) => (
                    <button
                      key={index}
                      onClick={() => handleQuickSuggestion(suggestion)}
                      className="p-2 bg-white dark:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors text-left"
                    >
                      <div className="flex items-center space-x-2">
                        <span className="text-lg">{suggestion.icon}</span>
                        <span className="text-sm text-gray-700 dark:text-gray-300">
                          {suggestion.text}
                        </span>
                      </div>
                    </button>
                  ))}
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Generated Todo Preview */}
        <AnimatePresence>
          {showGeneratedTodo && generatedTodo && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              className="px-4 pb-4"
            >
              <div className="bg-gradient-to-r from-green-50 to-blue-50 dark:from-green-900/20 dark:to-blue-900/20 p-4 rounded-lg border border-green-200 dark:border-green-700">
                <div className="flex items-center justify-between mb-3">
                  <h3 className="text-sm font-medium text-green-800 dark:text-green-200 flex items-center">
                    <Sparkles className="w-4 h-4 mr-2" />
                    Todo ƒë∆∞·ª£c t·∫°o b·ªüi AI
                  </h3>
                  <button
                    onClick={() => setShowGeneratedTodo(false)}
                    className="text-green-600 hover:text-green-700"
                  >
                    <X className="w-4 h-4" />
                  </button>
                </div>
                
                <div className="space-y-2">
                  <div className="flex items-center space-x-2">
                    <Target className="w-4 h-4 text-green-600" />
                    <span className="font-medium">{generatedTodo.title}</span>
                  </div>
                  {generatedTodo.description && (
                    <div className="flex items-start space-x-2">
                      <BookOpen className="w-4 h-4 text-green-600 mt-0.5" />
                      <span className="text-sm text-gray-600 dark:text-gray-400">
                        {generatedTodo.description}
                      </span>
                    </div>
                  )}
                  {generatedTodo.estimatedTime && (
                    <div className="flex items-center space-x-2">
                      <Clock className="w-4 h-4 text-green-600" />
                      <span className="text-sm text-gray-600 dark:text-gray-400">
                        {generatedTodo.estimatedTime} ph√∫t
                      </span>
                    </div>
                  )}
                </div>

                <div className="flex space-x-2 mt-3">
                  <button
                    onClick={handleCreateTodoFromChatbot}
                    disabled={isLoading}
                    className="flex-1 px-3 py-2 bg-green-500 text-white text-sm rounded-lg hover:bg-green-600 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isLoading ? 'ƒêang t·∫°o...' : 'T·∫°o Todo'}
                  </button>
                  <button
                    onClick={() => setShowGeneratedTodo(false)}
                    className="px-3 py-2 bg-gray-200 dark:bg-gray-600 text-gray-700 dark:text-gray-300 text-sm rounded-lg hover:bg-gray-300 dark:hover:bg-gray-500"
                  >
                    Ch·ªânh s·ª≠a
                  </button>
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Input Area */}
        <div className="p-4 border-t border-gray-200 dark:border-gray-700">
          <div className="flex items-center space-x-2">
            <div className="flex-1 relative">
              <input
                type="text"
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                placeholder="M√¥ t·∫£ c√¥ng vi·ªác b·∫°n mu·ªën l√†m..."
                className="w-full px-4 py-3 pr-12 rounded-lg border-2 border-gray-300 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-800 dark:text-gray-200"
                disabled={isLoading}
              />
              <button
                onClick={isRecording ? stopVoiceRecording : startVoiceRecording}
                className={`absolute right-2 top-1/2 transform -translate-y-1/2 p-2 rounded-lg transition-colors ${
                  isRecording 
                    ? 'bg-red-500 text-white' 
                    : 'bg-gray-100 hover:bg-gray-200 text-gray-600'
                }`}
              >
                {isRecording ? <MicOff className="w-4 h-4" /> : <Mic className="w-4 h-4" />}
              </button>
            </div>
            <button
              onClick={handleSendMessage}
              disabled={!inputMessage.trim() || isLoading}
              className="px-4 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              <Send className="w-4 h-4" />
            </button>
          </div>
          
          <div className="flex items-center justify-between mt-2">
            <div className="flex items-center space-x-2 text-xs text-gray-500">
              <Info className="w-3 h-3" />
              <span>Nh·∫•n Enter ƒë·ªÉ g·ª≠i, ho·∫∑c s·ª≠ d·ª•ng gi·ªçng n√≥i</span>
            </div>
            <button
              onClick={() => setShowSuggestions(!showSuggestions)}
              className="text-xs text-blue-600 hover:text-blue-700"
            >
              {showSuggestions ? '·∫®n' : 'Hi·ªán'} g·ª£i √Ω
            </button>
          </div>
        </div>
      </motion.div>
    </div>
  );
};

export default ChatbotTodoCreator; 